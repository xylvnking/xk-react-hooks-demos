import type { NextPage } from 'next'
import React, {useEffect, useState} from 'react'
import Head from 'next/head'
import Image from 'next/image'
import UseStateHook from './Components/UseStateHook' 
import UseEffectHook from './Components/UseEffectHook' 
import UseContextHook from './Components/UseContextHook' 
import UseMemoHook from './Components/UseMemoHook' 
import UseReducerHook from './Components/UseReducerHook' 
import UseCallbackHook from './Components/UseCallbackHook' 
import UseRefHook from './Components/UseRefHook' 
import Layout from './Components/Layout' 
import HomePage from './Components/HomePage'

import styles from '../styles/Home.module.css'
import layoutStyles from '../styles/Layout.module.scss'
import navStyles from '../styles/Nav.module.scss'

import { useRouter } from 'next/router'

// 'useState', 
// 'useEffect',
// 'useRef',
// 'useMemo',
// 'useCallback',
// 'useContext',
// 'useReducer'
{/* <UseEffectHook />
<UseStateHook />
<UseContextHook />
<UseMemoHook />
<UseReducerHook />
<UseCallbackHook />
<UseRefHook /> */}




const Home: NextPage = () => {
  const router = useRouter()

  const [hookSelected, setHookSelected] = useState<string>('')
  const [layoutOpen, setLayoutOpen] = useState<boolean>(true)
  const RenderSwitch = () => {
    switch(hookSelected) {
      case 'useState':
        return <UseStateHook />;
      case 'useEffect':
        return <UseEffectHook />;
      case 'useContext':
        return <UseContextHook />;
      case 'useMemo':
        return <UseMemoHook />;
      case 'useReducer':
        return <UseReducerHook />;
      case 'useCallback':
        return <UseCallbackHook />;
      case 'useRef':
        return <UseRefHook />;
      default:
        // router.push('/', undefined, { shallow: true })
        return <HomePage />
    }
  }

  useEffect(() => {
    if (router.query.hook && typeof router.query.hook == 'string') {
      if (router.query.hook == 'home') {
        setHookSelected(router.query.hook)
        router.push('/', undefined, { shallow: true })
      } else {
        setHookSelected(router.query.hook)

      }
    }

  }, [router.query])
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Hook Demos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="favicon.ico?v=1.1" />
      </Head>

        {/* <nav className={layoutStyles.topNav}>
          <button onClick={() => setLayoutOpen(!layoutOpen)}>view hooks</button>
        </nav> */}
        <nav className={navStyles.navContainer}>
          <h1 className={navStyles.navTitle}>REACT TYPESCRIPT HOOKS <span style={{fontSize: '15px'}}>//// personal reference docs by <a target='_blank' href='https://github.com/xylvnking'>xylvn king</a></span></h1>
        </nav>

      {/* <main className={layoutOpen ? `${layoutStyles.grid}` : `${layoutStyles.closed}`}> */}
      <main className={layoutStyles.grid}>
        {
          // layoutOpen 
          // &&
            // hookSelected &&
          <section className={layoutStyles.layoutColumn}>
            {/* <button onClick={() => setLayoutOpen(!layoutOpen)}>toggle layout</button> */}
            <Layout 
              selectHook={setHookSelected}
              hookSelected={hookSelected}
            />
          </section> 
          
        }
        
        <section className={layoutStyles.hookComponentsColumn}>
          {
            RenderSwitch()
          }
        </section>
      </main>
    </div>
  )
}

export default Home
